/*
 * This file is generated by jOOQ.
 */
package com.plumealerts.api.db.tables;


import com.plumealerts.api.db.Indexes;
import com.plumealerts.api.db.Keys;
import com.plumealerts.api.db.Public;
import com.plumealerts.api.db.tables.records.TwitchUserAccessTokenRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.12.1"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class TwitchUserAccessToken extends TableImpl<TwitchUserAccessTokenRecord> {

    private static final long serialVersionUID = 1434455408;

    /**
     * The reference instance of <code>public.twitch_user_access_token</code>
     */
    public static final TwitchUserAccessToken TWITCH_USER_ACCESS_TOKEN = new TwitchUserAccessToken();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TwitchUserAccessTokenRecord> getRecordType() {
        return TwitchUserAccessTokenRecord.class;
    }

    /**
     * The column <code>public.twitch_user_access_token.user_id</code>.
     */
    public final TableField<TwitchUserAccessTokenRecord, String> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>public.twitch_user_access_token.access_token</code>.
     */
    public final TableField<TwitchUserAccessTokenRecord, String> ACCESS_TOKEN = createField(DSL.name("access_token"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.twitch_user_access_token.refresh_token</code>.
     */
    public final TableField<TwitchUserAccessTokenRecord, String> REFRESH_TOKEN = createField(DSL.name("refresh_token"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.twitch_user_access_token.expired_at</code>.
     */
    public final TableField<TwitchUserAccessTokenRecord, OffsetDateTime> EXPIRED_AT = createField(DSL.name("expired_at"), org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false), this, "");

    /**
     * The column <code>public.twitch_user_access_token.last_validated</code>.
     */
    public final TableField<TwitchUserAccessTokenRecord, OffsetDateTime> LAST_VALIDATED = createField(DSL.name("last_validated"), org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * Create a <code>public.twitch_user_access_token</code> table reference
     */
    public TwitchUserAccessToken() {
        this(DSL.name("twitch_user_access_token"), null);
    }

    /**
     * Create an aliased <code>public.twitch_user_access_token</code> table reference
     */
    public TwitchUserAccessToken(String alias) {
        this(DSL.name(alias), TWITCH_USER_ACCESS_TOKEN);
    }

    /**
     * Create an aliased <code>public.twitch_user_access_token</code> table reference
     */
    public TwitchUserAccessToken(Name alias) {
        this(alias, TWITCH_USER_ACCESS_TOKEN);
    }

    private TwitchUserAccessToken(Name alias, Table<TwitchUserAccessTokenRecord> aliased) {
        this(alias, aliased, null);
    }

    private TwitchUserAccessToken(Name alias, Table<TwitchUserAccessTokenRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TwitchUserAccessToken(Table<O> child, ForeignKey<O, TwitchUserAccessTokenRecord> key) {
        super(child, key, TWITCH_USER_ACCESS_TOKEN);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TWITCH_USER_ACCESS_TOKEN_PKEY);
    }

    @Override
    public UniqueKey<TwitchUserAccessTokenRecord> getPrimaryKey() {
        return Keys.TWITCH_USER_ACCESS_TOKEN_PKEY;
    }

    @Override
    public List<UniqueKey<TwitchUserAccessTokenRecord>> getKeys() {
        return Arrays.<UniqueKey<TwitchUserAccessTokenRecord>>asList(Keys.TWITCH_USER_ACCESS_TOKEN_PKEY);
    }

    @Override
    public List<ForeignKey<TwitchUserAccessTokenRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TwitchUserAccessTokenRecord, ?>>asList(Keys.TWITCH_USER_ACCESS_TOKEN__TWITCH_USER_ACCESS_TOKEN_USER_ID_FKEY);
    }

    public Users users() {
        return new Users(this, Keys.TWITCH_USER_ACCESS_TOKEN__TWITCH_USER_ACCESS_TOKEN_USER_ID_FKEY);
    }

    @Override
    public TwitchUserAccessToken as(String alias) {
        return new TwitchUserAccessToken(DSL.name(alias), this);
    }

    @Override
    public TwitchUserAccessToken as(Name alias) {
        return new TwitchUserAccessToken(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TwitchUserAccessToken rename(String name) {
        return new TwitchUserAccessToken(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TwitchUserAccessToken rename(Name name) {
        return new TwitchUserAccessToken(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, String, String, OffsetDateTime, OffsetDateTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
