/*
 * This file is generated by jOOQ.
 */
package com.plumealerts.api.db.tables;


import com.plumealerts.api.db.Indexes;
import com.plumealerts.api.db.Keys;
import com.plumealerts.api.db.Public;
import com.plumealerts.api.db.tables.records.DashboardOldRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.12.2"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class DashboardOld extends TableImpl<DashboardOldRecord> {

    private static final long serialVersionUID = -2102401367;

    /**
     * The reference instance of <code>public.dashboard_old</code>
     */
    public static final DashboardOld DASHBOARD_OLD = new DashboardOld();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DashboardOldRecord> getRecordType() {
        return DashboardOldRecord.class;
    }

    /**
     * The column <code>public.dashboard_old.user_id</code>.
     */
    public final TableField<DashboardOldRecord, String> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>public.dashboard_old.type</code>.
     */
    public final TableField<DashboardOldRecord, String> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.dashboard_old.x</code>.
     */
    public final TableField<DashboardOldRecord, Short> X = createField(DSL.name("x"), org.jooq.impl.SQLDataType.SMALLINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.SMALLINT)), this, "");

    /**
     * The column <code>public.dashboard_old.y</code>.
     */
    public final TableField<DashboardOldRecord, Short> Y = createField(DSL.name("y"), org.jooq.impl.SQLDataType.SMALLINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.SMALLINT)), this, "");

    /**
     * The column <code>public.dashboard_old.width</code>.
     */
    public final TableField<DashboardOldRecord, Short> WIDTH = createField(DSL.name("width"), org.jooq.impl.SQLDataType.SMALLINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.SMALLINT)), this, "");

    /**
     * The column <code>public.dashboard_old.height</code>.
     */
    public final TableField<DashboardOldRecord, Short> HEIGHT = createField(DSL.name("height"), org.jooq.impl.SQLDataType.SMALLINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.SMALLINT)), this, "");

    /**
     * The column <code>public.dashboard_old.show</code>.
     */
    public final TableField<DashboardOldRecord, Boolean> SHOW = createField(DSL.name("show"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("true", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * Create a <code>public.dashboard_old</code> table reference
     */
    public DashboardOld() {
        this(DSL.name("dashboard_old"), null);
    }

    /**
     * Create an aliased <code>public.dashboard_old</code> table reference
     */
    public DashboardOld(String alias) {
        this(DSL.name(alias), DASHBOARD_OLD);
    }

    /**
     * Create an aliased <code>public.dashboard_old</code> table reference
     */
    public DashboardOld(Name alias) {
        this(alias, DASHBOARD_OLD);
    }

    private DashboardOld(Name alias, Table<DashboardOldRecord> aliased) {
        this(alias, aliased, null);
    }

    private DashboardOld(Name alias, Table<DashboardOldRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> DashboardOld(Table<O> child, ForeignKey<O, DashboardOldRecord> key) {
        super(child, key, DASHBOARD_OLD);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DASHBOARD_PKEY);
    }

    @Override
    public UniqueKey<DashboardOldRecord> getPrimaryKey() {
        return Keys.DASHBOARD_PKEY;
    }

    @Override
    public List<UniqueKey<DashboardOldRecord>> getKeys() {
        return Arrays.<UniqueKey<DashboardOldRecord>>asList(Keys.DASHBOARD_PKEY);
    }

    @Override
    public List<ForeignKey<DashboardOldRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<DashboardOldRecord, ?>>asList(Keys.DASHBOARD_OLD__DASHBOARD_USER_ID_FKEY);
    }

    public Users users() {
        return new Users(this, Keys.DASHBOARD_OLD__DASHBOARD_USER_ID_FKEY);
    }

    @Override
    public DashboardOld as(String alias) {
        return new DashboardOld(DSL.name(alias), this);
    }

    @Override
    public DashboardOld as(Name alias) {
        return new DashboardOld(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DashboardOld rename(String name) {
        return new DashboardOld(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DashboardOld rename(Name name) {
        return new DashboardOld(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<String, String, Short, Short, Short, Short, Boolean> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
