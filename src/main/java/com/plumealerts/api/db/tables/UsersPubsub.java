/*
 * This file is generated by jOOQ.
 */
package com.plumealerts.api.db.tables;


import com.plumealerts.api.db.Indexes;
import com.plumealerts.api.db.Keys;
import com.plumealerts.api.db.Public;
import com.plumealerts.api.db.tables.records.UsersPubsubRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.12.2"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class UsersPubsub extends TableImpl<UsersPubsubRecord> {

    private static final long serialVersionUID = -300901039;

    /**
     * The reference instance of <code>public.users_pubsub</code>
     */
    public static final UsersPubsub USERS_PUBSUB = new UsersPubsub();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UsersPubsubRecord> getRecordType() {
        return UsersPubsubRecord.class;
    }

    /**
     * The column <code>public.users_pubsub.user_id</code>.
     */
    public final TableField<UsersPubsubRecord, String> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>public.users_pubsub.type</code>.
     */
    public final TableField<UsersPubsubRecord, String> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.users_pubsub.connected</code>.
     */
    public final TableField<UsersPubsubRecord, OffsetDateTime> CONNECTED = createField(DSL.name("connected"), org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>public.users_pubsub.pong</code>.
     */
    public final TableField<UsersPubsubRecord, OffsetDateTime> PONG = createField(DSL.name("pong"), org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * Create a <code>public.users_pubsub</code> table reference
     */
    public UsersPubsub() {
        this(DSL.name("users_pubsub"), null);
    }

    /**
     * Create an aliased <code>public.users_pubsub</code> table reference
     */
    public UsersPubsub(String alias) {
        this(DSL.name(alias), USERS_PUBSUB);
    }

    /**
     * Create an aliased <code>public.users_pubsub</code> table reference
     */
    public UsersPubsub(Name alias) {
        this(alias, USERS_PUBSUB);
    }

    private UsersPubsub(Name alias, Table<UsersPubsubRecord> aliased) {
        this(alias, aliased, null);
    }

    private UsersPubsub(Name alias, Table<UsersPubsubRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> UsersPubsub(Table<O> child, ForeignKey<O, UsersPubsubRecord> key) {
        super(child, key, USERS_PUBSUB);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.USERS_PUBSUB_PKEY);
    }

    @Override
    public UniqueKey<UsersPubsubRecord> getPrimaryKey() {
        return Keys.USERS_PUBSUB_PKEY;
    }

    @Override
    public List<UniqueKey<UsersPubsubRecord>> getKeys() {
        return Arrays.<UniqueKey<UsersPubsubRecord>>asList(Keys.USERS_PUBSUB_PKEY);
    }

    @Override
    public List<ForeignKey<UsersPubsubRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<UsersPubsubRecord, ?>>asList(Keys.USERS_PUBSUB__USERS_PUBSUB_USER_ID_FKEY);
    }

    public Users users() {
        return new Users(this, Keys.USERS_PUBSUB__USERS_PUBSUB_USER_ID_FKEY);
    }

    @Override
    public UsersPubsub as(String alias) {
        return new UsersPubsub(DSL.name(alias), this);
    }

    @Override
    public UsersPubsub as(Name alias) {
        return new UsersPubsub(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UsersPubsub rename(String name) {
        return new UsersPubsub(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UsersPubsub rename(Name name) {
        return new UsersPubsub(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, OffsetDateTime, OffsetDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
