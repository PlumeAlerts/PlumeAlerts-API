/*
 * This file is generated by jOOQ.
 */
package com.plumealerts.api.db.tables;


import com.plumealerts.api.db.Indexes;
import com.plumealerts.api.db.Keys;
import com.plumealerts.api.db.Public;
import com.plumealerts.api.db.tables.records.UserPermissionRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.12.2"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class UserPermission extends TableImpl<UserPermissionRecord> {

    private static final long serialVersionUID = -1967175147;

    /**
     * The reference instance of <code>public.user_permission</code>
     */
    public static final UserPermission USER_PERMISSION = new UserPermission();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserPermissionRecord> getRecordType() {
        return UserPermissionRecord.class;
    }

    /**
     * The column <code>public.user_permission.channel_id</code>.
     */
    public final TableField<UserPermissionRecord, String> CHANNEL_ID = createField(DSL.name("channel_id"), org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>public.user_permission.user_id</code>.
     */
    public final TableField<UserPermissionRecord, String> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>public.user_permission.permission</code>.
     */
    public final TableField<UserPermissionRecord, String> PERMISSION = createField(DSL.name("permission"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * Create a <code>public.user_permission</code> table reference
     */
    public UserPermission() {
        this(DSL.name("user_permission"), null);
    }

    /**
     * Create an aliased <code>public.user_permission</code> table reference
     */
    public UserPermission(String alias) {
        this(DSL.name(alias), USER_PERMISSION);
    }

    /**
     * Create an aliased <code>public.user_permission</code> table reference
     */
    public UserPermission(Name alias) {
        this(alias, USER_PERMISSION);
    }

    private UserPermission(Name alias, Table<UserPermissionRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserPermission(Name alias, Table<UserPermissionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> UserPermission(Table<O> child, ForeignKey<O, UserPermissionRecord> key) {
        super(child, key, USER_PERMISSION);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.USER_PERMISSION_PKEY);
    }

    @Override
    public UniqueKey<UserPermissionRecord> getPrimaryKey() {
        return Keys.USER_PERMISSION_PKEY;
    }

    @Override
    public List<UniqueKey<UserPermissionRecord>> getKeys() {
        return Arrays.<UniqueKey<UserPermissionRecord>>asList(Keys.USER_PERMISSION_PKEY);
    }

    @Override
    public List<ForeignKey<UserPermissionRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<UserPermissionRecord, ?>>asList(Keys.USER_PERMISSION__USER_PERMISSION_CHANNEL_ID_FKEY, Keys.USER_PERMISSION__USER_PERMISSION_USER_ID_FKEY);
    }

    public Users userPermission_UserPermissionChannelIdFkey() {
        return new Users(this, Keys.USER_PERMISSION__USER_PERMISSION_CHANNEL_ID_FKEY);
    }

    public Users userPermission_UserPermissionUserIdFkey() {
        return new Users(this, Keys.USER_PERMISSION__USER_PERMISSION_USER_ID_FKEY);
    }

    @Override
    public UserPermission as(String alias) {
        return new UserPermission(DSL.name(alias), this);
    }

    @Override
    public UserPermission as(Name alias) {
        return new UserPermission(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserPermission rename(String name) {
        return new UserPermission(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserPermission rename(Name name) {
        return new UserPermission(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
