/*
 * This file is generated by jOOQ.
 */
package com.plumealerts.api.db.tables;


import com.plumealerts.api.db.Indexes;
import com.plumealerts.api.db.Keys;
import com.plumealerts.api.db.Public;
import com.plumealerts.api.db.tables.records.TwitchBitsRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TwitchBits extends TableImpl<TwitchBitsRecord> {

    private static final long serialVersionUID = 1474598238;

    /**
     * The reference instance of <code>public.twitch_bits</code>
     */
    public static final TwitchBits TWITCH_BITS = new TwitchBits();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TwitchBitsRecord> getRecordType() {
        return TwitchBitsRecord.class;
    }

    /**
     * The column <code>public.twitch_bits.message_id</code>.
     */
    public final TableField<TwitchBitsRecord, String> MESSAGE_ID = createField("message_id", org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>public.twitch_bits.anonymous</code>.
     */
    public final TableField<TwitchBitsRecord, Boolean> ANONYMOUS = createField("anonymous", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.twitch_bits.message</code>.
     */
    public final TableField<TwitchBitsRecord, String> MESSAGE = createField("message", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.twitch_bits.message_user_id</code>.
     */
    public final TableField<TwitchBitsRecord, String> MESSAGE_USER_ID = createField("message_user_id", org.jooq.impl.SQLDataType.VARCHAR(36), this, "");

    /**
     * The column <code>public.twitch_bits.message_username</code>.
     */
    public final TableField<TwitchBitsRecord, String> MESSAGE_USERNAME = createField("message_username", org.jooq.impl.SQLDataType.VARCHAR(25), this, "");

    /**
     * The column <code>public.twitch_bits.bits_used</code>.
     */
    public final TableField<TwitchBitsRecord, Integer> BITS_USED = createField("bits_used", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.twitch_bits.total_bits</code>.
     */
    public final TableField<TwitchBitsRecord, Integer> TOTAL_BITS = createField("total_bits", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.twitch_bits.time</code>.
     */
    public final TableField<TwitchBitsRecord, Timestamp> TIME = createField("time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>public.twitch_bits.channel_id</code>.
     */
    public final TableField<TwitchBitsRecord, String> CHANNEL_ID = createField("channel_id", org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * Create a <code>public.twitch_bits</code> table reference
     */
    public TwitchBits() {
        this(DSL.name("twitch_bits"), null);
    }

    /**
     * Create an aliased <code>public.twitch_bits</code> table reference
     */
    public TwitchBits(String alias) {
        this(DSL.name(alias), TWITCH_BITS);
    }

    /**
     * Create an aliased <code>public.twitch_bits</code> table reference
     */
    public TwitchBits(Name alias) {
        this(alias, TWITCH_BITS);
    }

    private TwitchBits(Name alias, Table<TwitchBitsRecord> aliased) {
        this(alias, aliased, null);
    }

    private TwitchBits(Name alias, Table<TwitchBitsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TwitchBits(Table<O> child, ForeignKey<O, TwitchBitsRecord> key) {
        super(child, key, TWITCH_BITS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TWITCH_BITS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TwitchBitsRecord> getPrimaryKey() {
        return Keys.TWITCH_BITS_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TwitchBitsRecord>> getKeys() {
        return Arrays.<UniqueKey<TwitchBitsRecord>>asList(Keys.TWITCH_BITS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<TwitchBitsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TwitchBitsRecord, ?>>asList(Keys.TWITCH_BITS__TWITCH_BITS_CHANNEL_ID_FKEY);
    }

    public Users users() {
        return new Users(this, Keys.TWITCH_BITS__TWITCH_BITS_CHANNEL_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TwitchBits as(String alias) {
        return new TwitchBits(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TwitchBits as(Name alias) {
        return new TwitchBits(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TwitchBits rename(String name) {
        return new TwitchBits(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TwitchBits rename(Name name) {
        return new TwitchBits(name, null);
    }
}
