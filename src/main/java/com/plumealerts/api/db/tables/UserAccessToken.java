/*
 * This file is generated by jOOQ.
 */
package com.plumealerts.api.db.tables;


import com.plumealerts.api.db.Indexes;
import com.plumealerts.api.db.Keys;
import com.plumealerts.api.db.Public;
import com.plumealerts.api.db.tables.records.UserAccessTokenRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserAccessToken extends TableImpl<UserAccessTokenRecord> {

    private static final long serialVersionUID = -22185878;

    /**
     * The reference instance of <code>public.user_access_token</code>
     */
    public static final UserAccessToken USER_ACCESS_TOKEN = new UserAccessToken();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserAccessTokenRecord> getRecordType() {
        return UserAccessTokenRecord.class;
    }

    /**
     * The column <code>public.user_access_token.user_id</code>.
     */
    public final TableField<UserAccessTokenRecord, String> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>public.user_access_token.access_token</code>.
     */
    public final TableField<UserAccessTokenRecord, String> ACCESS_TOKEN = createField(DSL.name("access_token"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.user_access_token.refresh_token</code>.
     */
    public final TableField<UserAccessTokenRecord, String> REFRESH_TOKEN = createField(DSL.name("refresh_token"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.user_access_token.expired_at</code>.
     */
    public final TableField<UserAccessTokenRecord, OffsetDateTime> EXPIRED_AT = createField(DSL.name("expired_at"), org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false), this, "");

    /**
     * The column <code>public.user_access_token.refresh_expired_at</code>.
     */
    public final TableField<UserAccessTokenRecord, OffsetDateTime> REFRESH_EXPIRED_AT = createField(DSL.name("refresh_expired_at"), org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false), this, "");

    /**
     * Create a <code>public.user_access_token</code> table reference
     */
    public UserAccessToken() {
        this(DSL.name("user_access_token"), null);
    }

    /**
     * Create an aliased <code>public.user_access_token</code> table reference
     */
    public UserAccessToken(String alias) {
        this(DSL.name(alias), USER_ACCESS_TOKEN);
    }

    /**
     * Create an aliased <code>public.user_access_token</code> table reference
     */
    public UserAccessToken(Name alias) {
        this(alias, USER_ACCESS_TOKEN);
    }

    private UserAccessToken(Name alias, Table<UserAccessTokenRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserAccessToken(Name alias, Table<UserAccessTokenRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> UserAccessToken(Table<O> child, ForeignKey<O, UserAccessTokenRecord> key) {
        super(child, key, USER_ACCESS_TOKEN);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.USER_ACCESS_TOKEN_PKEY);
    }

    @Override
    public UniqueKey<UserAccessTokenRecord> getPrimaryKey() {
        return Keys.USER_ACCESS_TOKEN_PKEY;
    }

    @Override
    public List<UniqueKey<UserAccessTokenRecord>> getKeys() {
        return Arrays.<UniqueKey<UserAccessTokenRecord>>asList(Keys.USER_ACCESS_TOKEN_PKEY);
    }

    @Override
    public List<ForeignKey<UserAccessTokenRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<UserAccessTokenRecord, ?>>asList(Keys.USER_ACCESS_TOKEN__USER_ACCESS_TOKEN_USER_ID_FKEY);
    }

    public Users users() {
        return new Users(this, Keys.USER_ACCESS_TOKEN__USER_ACCESS_TOKEN_USER_ID_FKEY);
    }

    @Override
    public UserAccessToken as(String alias) {
        return new UserAccessToken(DSL.name(alias), this);
    }

    @Override
    public UserAccessToken as(Name alias) {
        return new UserAccessToken(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserAccessToken rename(String name) {
        return new UserAccessToken(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserAccessToken rename(Name name) {
        return new UserAccessToken(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, String, String, OffsetDateTime, OffsetDateTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
